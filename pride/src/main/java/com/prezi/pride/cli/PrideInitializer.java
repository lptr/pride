package com.prezi.pride.cli;

import com.google.common.collect.Iterators;
import com.prezi.pride.Module;
import com.prezi.pride.Pride;
import com.prezi.pride.PrideException;
import com.prezi.pride.RuntimeConfiguration;
import com.prezi.pride.vcs.VcsManager;
import org.apache.commons.configuration.Configuration;
import org.apache.commons.configuration.ConfigurationException;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;

import static java.nio.file.StandardOpenOption.*;

public class PrideInitializer {

	private static final Logger logger = LoggerFactory.getLogger(PrideInitializer.class);
	private static final String DO_NOT_MODIFY_WARNING =
			"//\n" +
			"// DO NOT MODIFY -- This file is generated by Pride, and will be\n" +
			"// overwritten whenever the pride itself is changed.\n//\n";
	private final boolean verbose;

	public PrideInitializer(boolean verbose) {
		this.verbose = verbose;
	}

	public Pride create(File prideDirectory, RuntimeConfiguration globalConfig, Configuration prideConfig, VcsManager vcsManager) throws IOException, ConfigurationException {
		logger.info("Initializing {}", prideDirectory);
		FileUtils.forceMkdir(prideDirectory);

		File configDirectory = Pride.getPrideConfigDirectory(prideDirectory);
		FileUtils.deleteDirectory(configDirectory);
		FileUtils.forceMkdir(configDirectory);
		FileUtils.write(Pride.getPrideVersionFile(configDirectory), "0\n", StandardCharsets.UTF_8);

		// Create config file
		File configFile = Pride.getPrideConfigFile(configDirectory);
		PropertiesConfiguration prideFileConfig = new PropertiesConfiguration(configFile);
		boolean prideConfigModified = false;
		for (String key : Iterators.toArray(prideConfig.getKeys(), String.class)) {
			// Skip modules
			if (key.startsWith("modules.")) {
				continue;
			}
			prideFileConfig.setProperty(key, prideConfig.getProperty(key));
			prideConfigModified = true;
		}
		if (prideConfigModified) {
			prideFileConfig.save();
		}

		Pride pride = new Pride(prideDirectory, globalConfig, prideFileConfig, vcsManager);
		reinitialize(pride);
		return pride;
	}

	public void reinitialize(Pride pride) {
		try {
			File buildFile = pride.getGradleBuildFile();
			try (OutputStream buildOut = Files.newOutputStream(buildFile.toPath(), CREATE, TRUNCATE_EXISTING)) {
				IOUtils.write(DO_NOT_MODIFY_WARNING, buildOut, StandardCharsets.UTF_8);
				IOUtils.copy(PrideInitializer.class.getResourceAsStream("/build.gradle"), buildOut);
			}

			File settingsFile = pride.getGradleSettingsFile();
			try (OutputStream settingsOut = Files.newOutputStream(settingsFile.toPath(), CREATE, TRUNCATE_EXISTING)) {
				IOUtils.write(DO_NOT_MODIFY_WARNING, settingsOut, StandardCharsets.UTF_8);
				for (Module module: pride.getModules()) {
					IOUtils.write("includeBuild \'" + module.getName() + "\'\n", settingsOut, StandardCharsets.UTF_8);
				}
			}
		} catch (Exception ex) {
			throw new PrideException("There was a problem during the initialization of the pride. Fix the errors above, and try again with\n\n\tpride init --force", ex);
		}
	}
}
